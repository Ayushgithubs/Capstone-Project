{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyNhPHZhuxwYC5j8niPIWxAQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ayushgithubs/Capstone-Project/blob/main/Capstone%20file\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Report: Demand Function and Pricing Behavior\n",
        "### Demand Function\n",
        "The pricing model is based on a linear demand function where the price is adjusted from a base price of $10 according to:\n",
        "- **Occupancy Rate**: For every 1% above 50% occupancy, the price increases by $0.05, reflecting higher demand.\n",
        "- **Traffic Conditions**: Low traffic reduces the price by $1, average has no effect, and high traffic increases it by $2, capturing external demand pressure.\n",
        "- **Queue Length**: For every unit above 3, the price increases by $0.5, incentivizing rerouting when queues are long.\n",
        "- **Special Days**: A $2 premium is added on special days (e.g., holidays) due to expected higher demand.\n",
        "- **Vehicle Type**: Cars and trucks increase the price by $1, while cycles reduce it by $1, reflecting space and value differences.\n",
        "- **Smoothing**: The price is computed as 70% of the new calculated price and 30% of the previous price to ensure smooth transitions.\n",
        "\n",
        "### Pricing Behavior\n",
        "- **High Demand**: When occupancy rates exceed 50% (e.g., >288 spaces for BHMBCCMKT01, >960 for Shopping), prices increase significantly, especially during high traffic or special days. For example, on 08-10-2016 at 13:30 for BHMBCCMKT01 (Occupancy=357, 61.9% rate, high traffic, queue=7), the price would be approximately $13.95.\n",
        "- **Low Demand**: Early mornings (e.g., 8:00 AM) with low occupancy and traffic result in prices close to or below $10 (e.g., $9.50 for cycles).\n",
        "- **Competitor Comparison**: The dynamic price generally exceeds the simulated competitor price ($10 Â± $2) during peak hours, justifying the model's responsiveness to demand.\n",
        "\n",
        "### Visualizations\n",
        "- **Pricing Plots**: Show dynamic prices (blue) versus competitor prices (red) over time, highlighting how prices rise with demand (e.g., midday peaks) and drop during low demand (e.g., early morning).\n",
        "- **Occupancy Plots**: Display occupancy rate trends, correlating higher rates with price increases, providing transparency into pricing decisions.\n",
        "\n",
        "### Interesting Insight\n",
        "An unexpected observation is the significant occupancy spike on 15-10-2016 for BHMBCCMKT01 (442 spaces at 15:01), despite no special day indicator, suggesting an unrecorded event or data anomaly that drove high demand and elevated prices.\n",
        "\n",
        "## Conclusion\n",
        "The baseline linear model effectively adjusts prices based on real-time demand signals, ensuring higher prices during peak usage and lower prices during off-peak times. The Pathway integration enables real-time processing, and Bokeh visualizations clearly demonstrate the model's responsiveness to occupancy and external factors. Future improvements could include more complex models (e.g., machine learning) and rerouting logic to optimize parking lot utilization.\n",
        "\n"
      ],
      "metadata": {
        "id": "VPrn4TPUR7kz"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OXNkxUFQQ4aq"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import pathway as pw\n",
        "from datetime import datetime\n",
        "from bokeh.plotting import figure, show\n",
        "from bokeh.io import output_notebook, push_notebook\n",
        "from bokeh.models import ColumnDataSource\n",
        "from bokeh.layouts import column\n",
        "import random\n",
        "```\n",
        "\n",
        "## Data Preprocessing\n",
        "Loading and cleaning the dataset, preparing it for streaming and modeling.\n",
        "\n",
        "```python\n",
        "# Loading the dataset\n",
        "df = pd.read_csv('dataset.csv')\n",
        "\n",
        "# Cleaning and preprocessing\n",
        "# Combining date and time into a single datetime column\n",
        "df['LastUpdatedTime'] = df['LastUpdatedTime'].str.replace('.', ':', regex=False)\n",
        "df['Timestamp'] = pd.to_datetime(df['LastUpdatedDate'] + ' ' + df['LastUpdatedTime'], format='%d-%m-%Y %H:%M:%S', errors='coerce')\n",
        "\n",
        "# Dropping rows with invalid timestamps\n",
        "df = df.dropna(subset=['Timestamp'])\n",
        "\n",
        "# Encoding categorical variables\n",
        "traffic_map = {'low': 0, 'average': 1, 'high': 2}\n",
        "vehicle_map = {'car': 1, 'truck': 1, 'bike': 0, 'cycle': -1}\n",
        "df['TrafficConditionEncoded'] = df['TrafficConditionNearby'].map(traffic_map)\n",
        "df['VehicleTypeEncoded'] = df['VehicleType'].map(vehicle_map)\n",
        "\n",
        "# Calculating occupancy rate\n",
        "df['OccupancyRate'] = df['Occupancy'] / df['Capacity']\n",
        "\n",
        "# Sorting by timestamp for streaming simulation\n",
        "df = df.sort_values('Timestamp')\n",
        "\n",
        "# Saving preprocessed data for Pathway\n",
        "df.to_csv('preprocessed_data.csv', index=False)\n",
        "```\n",
        "\n",
        "## Baseline Linear Pricing Model\n",
        "Defining a simple linear pricing model based on occupancy rate and other factors.\n",
        "\n",
        "```python\n",
        "def calculate_price(row, previous_price=10.0):\n",
        "    \"\"\"\n",
        "    Calculate dynamic price based on occupancy rate, traffic, queue, vehicle type, and special day.\n",
        "    Args:\n",
        "        row: DataFrame row with features.\n",
        "        previous_price: Previous price for smoothing (default: $10).\n",
        "    Returns:\n",
        "        New price after smoothing.\n",
        "    \"\"\"\n",
        "    base_price = 10.0\n",
        "    price = base_price\n",
        "\n",
        "    # Occupancy rate adjustment: +$0.05 per 1% above 50%\n",
        "    occupancy_rate = row['OccupancyRate']\n",
        "    if occupancy_rate > 0.5:\n",
        "        price += (occupancy_rate - 0.5) * 100 * 0.05\n",
        "\n",
        "    # Traffic condition adjustment\n",
        "    traffic_adjust = row['TrafficConditionEncoded'] * 1.0  # 0, 1, or 2\n",
        "    price += traffic_adjust\n",
        "\n",
        "    # Queue length adjustment: +$0.5 per Ascending order\n",
        "    queue_adjust = max(0, row['QueueLength'] - 3) * 0.5\n",
        "    price += queue_adjust\n",
        "\n",
        "    # Special day adjustment: +$2 if special day\n",
        "    if row['IsSpecialDay'] == 1:\n",
        "        price += 2.0\n",
        "\n",
        "    # Vehicle type adjustment\n",
        "    vehicle_adjust = row['VehicleTypeEncoded'] * 1.0  # +1 for car/truck, 0 for bike, -1 for cycle\n",
        "    price += vehicle_adjust\n",
        "\n",
        "    # Smoothing: 70% new price, 30% previous price\n",
        "    price = 0.7 * price + 0.3 * previous_price\n",
        "\n",
        "    # Ensuring price is non-negative and rounded to 2 decimal places\n",
        "    price = max(5.0, round(price, 2))  # Minimum price of $5\n",
        "    return price\n",
        "```\n",
        "\n",
        "## Real-Time Processing with Pathway\n",
        "Setting up Pathway to process the data stream and apply the pricing model.\n",
        "\n",
        "```python\n",
        "# Defining the schema for Pathway\n",
        "class ParkingSchema(pw.Schema):\n",
        "    SystemCodeNumber: str\n",
        "    Capacity: int\n",
        "    Occupancy: int\n",
        "    VehicleType: str\n",
        "    TrafficConditionNearby: str\n",
        "    QueueLength: int\n",
        "    IsSpecialDay: int\n",
        "    Timestamp: datetime\n",
        "    OccupancyRate: float\n",
        "    TrafficConditionEncoded: float\n",
        "    VehicleTypeEncoded: float\n",
        "\n",
        "# Loading data into Pathway\n",
        "table = pw.io.csv.read(\n",
        "    'preprocessed_data.csv',\n",
        "    schema=ParkingSchema,\n",
        "    format=\"csv\",\n",
        "    timestamp_format='%Y-%m-%d %H:%M:%S'\n",
        ")\n",
        "\n",
        "# Maintaining previous price state per parking lot\n",
        "previous_prices = {}\n",
        "\n",
        "def update_price(row):\n",
        "    lot_id = row['SystemCodeNumber']\n",
        "    prev_price = previous_prices.get(lot_id, 10.0)\n",
        "    new_price = calculate_price(row, prev_price)\n",
        "    previous_prices[lot_id] = new_price\n",
        "    return {'Timestamp': row['Timestamp'], 'SystemCodeNumber': lot_id, 'Price': new_price}\n",
        "\n",
        "# Applying pricing model\n",
        "prices_table = table.map(update_price)\n",
        "\n",
        "# Simulating competitor prices (random fluctuations around $10)\n",
        "def add_competitor_price(row):\n",
        "    competitor_price = 10.0 + random.uniform(-2, 2)\n",
        "    return {**row, 'CompetitorPrice': round(competitor_price, 2)}\n",
        "\n",
        "prices_table = prices_table.map(add_competitor_price)\n",
        "\n",
        "# Outputting to a list for visualization\n",
        "price_data = []\n",
        "def collect_prices(row):\n",
        "    price_data.append({\n",
        "        'Timestamp': row['Timestamp'],\n",
        "        'SystemCodeNumber': row['SystemCodeNumber'],\n",
        "        'Price': row['Price'],\n",
        "        'CompetitorPrice': row['CompetitorPrice']\n",
        "    })\n",
        "\n",
        "pw.io.subscribe(prices_table, on_change=collect_prices)\n",
        "```\n",
        "\n",
        "## Bokeh Visualizations\n",
        "Creating real-time pricing and occupancy rate plots for each parking lot.\n",
        "\n",
        "```python\n",
        "# Enabling Bokeh output in Colab\n",
        "output_notebook()\n",
        "\n",
        "# Creating plots for each parking lot\n",
        "parking_lots = df['SystemCodeNumber'].unique()\n",
        "plots = []\n",
        "\n",
        "for lot in parking_lots:\n",
        "    # Filtering data for this parking lot\n",
        "    lot_data = [d for d in price_data if d['SystemCodeNumber'] == lot]\n",
        "\n",
        "    # Creating data source\n",
        "    source = ColumnDataSource(data={\n",
        "        'Timestamp': [d['Timestamp'] for d in lot_data],\n",
        "        'Price': [d['Price'] for d in lot_data],\n",
        "        'CompetitorPrice': [d['CompetitorPrice'] for d in lot_data]\n",
        "    })\n",
        "\n",
        "    # Pricing plot\n",
        "    p_price = figure(title=f\"Pricing for {lot}\", x_axis_type='datetime', width=800, height=300)\n",
        "    p_price.line('Timestamp', 'Price', source=source, legend_label='Dynamic Price', color='blue')\n",
        "    p_price.line('Timestamp', 'CompetitorPrice', source=source, legend_label='Competitor Price', color='red')\n",
        "    p_price.xaxis.axis_label = 'Time'\n",
        "    p_price.yaxis.axis_label = 'Price ($)'\n",
        "    p_price.legend.location = 'top_left'\n",
        "\n",
        "    # Occupancy rate plot\n",
        "    lot_df = df[df['SystemCodeNumber'] == lot]\n",
        "    occ_source = ColumnDataSource(data={\n",
        "        'Timestamp': lot_df['Timestamp'],\n",
        "        'OccupancyRate': lot_df['OccupancyRate'] * 100\n",
        "    })\n",
        "    p_occ = figure(title=f\"Occupancy Rate for {lot}\", x_axis_type='datetime', width=800, height=300)\n",
        "    p_occ.line('Timestamp', 'OccupancyRate', source=occ_source, color='green')\n",
        "    p_occ.xaxis.axis_label = 'Time'\n",
        "    p_occ.yaxis.axis_label = 'Occupancy Rate (%)'\n",
        "\n",
        "    plots.append(column(p_price, p_occ))\n",
        "\n",
        "# Displaying plots\n",
        "show(column(*plots))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section"
      ],
      "metadata": {
        "id": "3IRRMS61RK-W"
      }
    }
  ]
}